@using JiayiLauncher.Features.Mods
@using JiayiLauncher.Pages
@using JiayiLauncher.Features.Launch
@using System.Diagnostics
@using JiayiLauncher.Features.Discord
@using JiayiLauncher.Features.Game
@using JiayiLauncher.Shared.Components.Toasts

@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="mod-background" @onmouseenter="MouseOver" @onmouseleave="MouseLeave">
    <div class="mod-header">
        <strong>@Mod.Name</strong>

        <div class="right">
            @if (!Mod.IsValid())
            {
                @if (Mod.FromInternet)
                {
                    <span class="material-symbols-sharp"
                          style="color: darkorange;"
                          title="This mod is broken; it doesn't exist on the web anymore.">
                        error
                    </span>
                }
                else
                {
                    <span class="material-symbols-sharp"
                          style="color: darkorange;"
                          title="This mod is broken; the file is missing from the mods directory.">
                        error
                    </span>
                }
            }
            else
            {
                @if (Mod.FromInternet)
                {
                    <span class="material-symbols-sharp" title="Downloaded from the web">cloud_download</span>
                }
                else
                {
                    <span class="material-symbols-sharp" title="Stored locally">hard_drive_2</span>
                }
            }
        </div>
    </div>
    <p class="mod-version">Works on @(string.Join(", ", Mod.SupportedVersions).ToLower())</p>
    <div class="mod-controls">
        @if (Mod.IsValid())
        {
            <JiayiButton OnClick="LaunchClicked" @ref="_launchButton" Disabled="@_launching"
                         Size="JiayiButton.ButtonSize.Small" Style="@_launchProgress">Launch</JiayiButton>

            <div class="right">
                <span class="material-symbols-sharp" style="cursor: pointer; opacity: @_controlsOpacity;"
                      title="Edit mod" @onclick="EditClicked">edit</span>
                <span class="material-symbols-sharp" style="color: darkred; cursor: pointer; opacity: @_controlsOpacity;"
                      title="Delete mod (irreversible)" @onclick="DeleteClicked">delete</span>
            </div>
        }
        else
        {
            <JiayiButton OnClick="DeleteNoConfirm" Size="JiayiButton.ButtonSize.Small">Delete</JiayiButton>
        }
    </div>
</div>

@code {
    [Parameter] public Mod Mod { get; set; } = null!;

    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private string _controlsOpacity = "0";

    private bool _launching;
    // percentage to rem from 0-7
    private string _launchProgress => _launching ?
        $"padding: 0.5rem 1.5rem; " +
        $"background: linear-gradient(to right, " +
        $"rgb(255, 55, 55) 0%, rgb(255, 55, 55) {Launcher.LaunchProgress}%," +
        $"var(--accent) {Launcher.LaunchProgress}%," +
        $"var(--accent) 100%"
        : "padding: 0.5rem 1.5rem;";

    private JiayiButton? _launchButton;

    private async Task LaunchClicked()
    {
        if (Launcher.Launching) return;

        Launcher.LaunchResult result;

        if (Minecraft.ModsLoaded.Contains(Mod))
        {
            var toastParams = new ToastParameters()
                .Add(nameof(JiayiToast.Title), "This mod is already loaded!");
            
            ToastService.ShowToast<JiayiToast>(toastParams);
            return;
        }

        var parameters = new ModalParameters();

        if (Minecraft.ModsLoaded.Count > 0)
        {
            var options = new List<(string, EventCallback)>
            {
                ("Yes", new EventCallback(null, async () =>
                {
                    result = await Launcher.Launch(Mod);
                })),
                ("No", EventCallback.Empty)
            };

            parameters
                .Add(nameof(MessageBox.Buttons), options)
                .Add(nameof(MessageBox.Message),
                    $"Launching more than one mod at a time can make your game unstable. Are you sure you want to launch {Mod.Name}?");

            ModalService.Show<MessageBox>("Warning", parameters);
            return;
        }

        // we good
        _launching = true;

        Launcher.LaunchProgressChanged += (_, _) => StateHasChanged();
        result = await Launcher.Launch(Mod);

        _launching = false;

        switch (result)
        {
            // only cases that are errors
            case Launcher.LaunchResult.DownloadFailed:
                parameters.Add(nameof(MessageBox.Message), "Failed to download mod. Please try again later.");
                ModalService.Show<MessageBox>("Download failed", parameters);
                break;
            case Launcher.LaunchResult.ModNotFound:
                parameters.Add(nameof(MessageBox.Message), "Your mod was deleted during launch. Try turning off your antivirus.");
                ModalService.Show<MessageBox>("Mod not found", parameters);
                break;
            case Launcher.LaunchResult.GameNotFound:
                parameters.Add(nameof(MessageBox.Message), "The game was not open during launch. Turn off your antivirus in case it's terminating the game.");
                ModalService.Show<MessageBox>("Game closed", parameters);
                break;
            case Launcher.LaunchResult.VersionMismatch:
                // something different
                var supportedVersion = Mod.SupportedVersions[0];
                
                var buttons = new List<(string, EventCallback)>
                {
                    ("Yes", new EventCallback(null, () =>
                    {
                        NavigationManager.NavigateTo($"/Versions/Full/{supportedVersion}");
                    })),
                    ("No", EventCallback.Empty)
                };

                parameters
                    .Add(nameof(MessageBox.Buttons), buttons)
                    .Add(nameof(MessageBox.Message),
                        $"{Mod.Name} doesn't support your current game version. Would you like to switch to {supportedVersion}?");

                ModalService.Show<MessageBox>("Unsupported version", parameters);
                break;
            case Launcher.LaunchResult.InjectionFailed:
                parameters.Add(nameof(MessageBox.Message), "Your mod could not be injected. Try turning off your antivirus, and check logs for extended error information.");
                ModalService.Show<MessageBox>("Injection failed", parameters);
                break;
        }

        StateHasChanged();
    }

    private void MouseOver()
    {
        _controlsOpacity = "100%";
        StateHasChanged();
    }

    private void MouseLeave()
    {
        _controlsOpacity = "0";
        StateHasChanged();
    }

    private void EditClicked()
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditMod.Mod), Mod);

        ModalService.Show<EditMod>("Edit mod", parameters);
    }

    private void DeleteClicked()
    {
        var options = new List<(string, EventCallback)>
        {
            ("Yes", new EventCallback(null, () =>
            {
                Mod.Delete();
                Mods.Instance?.Refresh();
            })),
            ("No", EventCallback.Empty)
        };

        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), $"Are you sure you want to delete {Mod.Name}? This action is irreversible.");

        ModalService.Show<MessageBox>("Delete mod", parameters);
    }

    private void DeleteNoConfirm()
    {
        Mod.Delete();
        Mods.Instance?.Refresh();
    }
}